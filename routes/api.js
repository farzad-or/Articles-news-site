const express = require('express');
const User = require('../model/user');
const bcrypt = require('bcrypt');
const saltRounds = 13;
const router = express.Router();
const userRoute=require('./user');

// const articleRoute=require('./article');
// const commentRoute=require('./comment');
// const adminRoute=require('./admin');





///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////FUNC TO CHECK SESSION/////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


const checkSession = function(req, res, next) {
  if (!req.session.user) return res.redirect('/api/signIn')
  next();
};



///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////FUNC TO CHECK ROLE, FOR ADMIN ROUTE/////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


function checkRole(req, res, next){
  if(req.session.user.role !== "admin"){
     return res.render('error',{
          message: "شما به این صفحه دسترسی ندارید",
          error:{
              stack:'',
              status: "405"
          }
      })
  }
  next()
}

///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////USE ROUTES/////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


router.use('/user', checkSession, userRoute);
// router.use('/article',checkSession, articleRoute);
// router.use('/comment',checkSession, commentRoute);
// router.use('/admin',checkSession,checkRole, adminRoute);


///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////FUNC TO CHECK LOGIN /////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////




const isLogin = function(req, res, next) { 
  if (req.session.user) return res.redirect(`/api/user/dashboard`)
  next();
};






///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// GET SIGNUP PAGE    ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////




router.get("/signUp", (req, res) => {
  res.render("pages/signUp")
})

///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////  GET SIGNIN PAGE    ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


router.get("/signIn", (req, res) => {
  res.render("pages/signIn")
})

///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////  POST TO SIGNUP USER   ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


router.post('/signUp', async function (req, res) {
  try {
    if (!req.body.userName || !req.body.password || !req.body.firstName || !req.body.lastName || !req.body.email || !req.body.gender || !req.body.phones) {
      throw new Error('You have an empty input.')
    };

    if (req.body.password.length < 8) {
      throw new Error('password is too short.')
    };
    req.body.password = await bcrypt.hash(req.body.password, saltRounds);
    console.log(req.body.password);
    const newUser = new User({

      firstName: req.body.firstName,
      lastName: req.body.lastName,
      userName: req.body.userName,
      phones: req.body.phones,
      email: req.body.email,
      password: req.body.password,
      gender: req.body.gender
    });
    let user = await newUser.save();


    if (user) {
      res.json({
        message: true
      })
    } else {
      throw new Error("something Wrong")
    }
  } catch (error) {
    console.log(7007);
    res.json({
      message: error.message
    })
  }
});

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// POST TO SIGNIN USER  ////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/signIn', async function (req, res) {
  console.log(11);
  console.log(req.body);
  try {
    // check empty fields
    if (!req.body.userName || !req.body.password) {
      throw new Error('You have an empty input.')
    };

    let user = await new Promise((resolve, reject) => {
      User.findOne({

        userName: req.body.userName

      }, (err, data) => {
        if (err) reject(err);
        if (data) {
          bcrypt.compare(req.body.password, data.password, function (err, result) {
            if (result) {
              resolve(data);
            } else {
              reject("your password is incorrect")
            }
          });
        } else {
          console.log("not found");
        }
      })
    })
    console.log(user);
    if (user === null) {
      res.render("pages/signIn")
    }
    if (user.role === "admin") {
      res.redirect("admin")
    } else if (user) {
      console.log(req.session.user);
      req.session.user = user;

      res.redirect("dashboard")

    }

  } catch (error) {
    console.log(error);
    res.render("pages/signIn")
  }
})

///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////  GET dashboard PAGE    ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////



router.get("/blog", (req, res) => {
  res.render("pages/blog")
})
router.get("/chat", (req, res) => {
  res.render("pages/chat")
})

router.get("/forgot-password", (req, res) => {
  res.render("pages/forgot-password")
})
router.get("/post", (req, res) => {
  res.render("pages/post")
})



///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////setting up log out requests///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

router.get("/logOut", (req, res) => {//dark mode

  req.session.destroy();

  res.redirect("/api/signIn")
})
///////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////setting up log out requests///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// forget password end point ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// search end point ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// search end point ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// change language end point //////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////



module.exports = router;